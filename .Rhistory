(1-exp(model$coeff[2]))/(exp(model$coeff[2]))
(1-(model$coeff[2]))/((model$coeff[2]))
model$coeff[1]/((model$coeff[2]))
(exp(model$coeff[1]))/(exp(model$coeff[2]))
(exp(model$coeff[1]))/(1-exp(model$coeff[1]))
model<-glm(factor(shuttle$use)~factor(shuttle$wind),family="binomial")
(exp(model$coeff[1]))/(1-exp(model$coeff[1]))
(exp(model$coeff[1]))/(exp(model$coeff[2]))
model<-glm(shuttle$use~shuttle$wind,family="binomial")
exp(model$coeff)
glm(shuttle$use~shuttle$wind,family="binomial")
exp(model$coeff)
model<-glm(shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
exp(model$coeff)
model<-glm(1-shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
glm1<-glm(InsectSprays$count~InsectSprays$spray,family="poisson")
exp(glm1$coeff)
1-exp(model$coeff)
1-exp(model$coeff[2])
1-exp(glm1$coeff[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-0
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
xMat<-cbind(1,x,splineTerms)
splineTerms
xMat<-cbind(1,x,splineTerms)
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2) lines(x,yhat,col="red",lwd=2)
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
yhat
glm1<-glm(InsectSprays$count~InsectSprays$spray,family="poisson")
exp(glm1$coeff)
exp(glm1$coeff[1])/exp(glm1$coeff[1])
exp(glm1$coeff[1])/exp(glm1$coeff[2])
1-exp(glm1$coeff)
glm1<-glm(InsectSprays$count~InsectSprays$spray,offset = 1, family="poisson")
glm1<-glm(InsectSprays$count~factor(InsectSprays$spray), family="poisson")
exp(glm1$coeff)
glm1<-glm(InsectSprays$count~1-factor(InsectSprays$spray), family="poisson")
exp(glm1$coeff)
glm1<-glm(InsectSprays$count~factor(InsectSprays$spray), family="poisson")
glm1<-glm(InsectSprays$count~factor(InsectSprays$spray)-1, family="poisson")
exp(glm1$coeff)
exp(glm1$coeff[1])/exp(glm1$coeff[2])
model<-glm(1-shuttle$use~shuttle$wind+shuttle$magn-1,family="binomial")
model<-glm(1-shuttle$use~shuttle$wind-1+shuttle$magn,family="binomial")
model<-glm(1-shuttle$use~shuttle$wind+shuttle$magn,family="binomial")
model<-glm(shuttle$use~shuttle$wind+shuttle$magn-1,family="binomial")
summary(model)
exp(model$coeff)
exp(model$coeff[1])/exp(model$coeff[2])
lm(y~xMat-1)
df <- data.frame(xMat)
df <- cbind(y, df)
names(df) <- c("y", "Intercept", "x", "splines")
lm(y ~ . - 1, data=df)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="~/downloads/webData.rd")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="~/downloads/webData.rda")
download.file("http://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="~/downloads/webData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="~/downloads/webData.rda", method=curl)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="~/downloads/webData.rda", method="curl")
load("~/downloads/webData.rda")gaData$julian<-julian(gaData$date)head(gaData)
load("~/downloads/webData.rda")
gaData$julian<-julian(gaData$date)
head(gaData)
plot(gaData$julian,gaData$visits,pch=19,col="darkgrey",xlab="Julian",ylab="Visits")
lm1<-lm(gaData$visits~gaData$julian)
abline(lm1,col="red",lwd=3)
glm2<-glm(gaData$simplystats~julian(gaData$date),offset=log(visits+1), family="poisson",data=gaData)
plot(julian(gaData$date),glm2$fitted,col="blue",pch=19,xlab="Date",ylab="FittedCounts")
points(julian(gaData$date),glm1$fitted,col="red",pch=19)
summary(glm2)
gaData$visits=log(10)+gaData$visits
head(gaData)
glm3<-glm(gaData$simplystats~julian(gaData$date),offset=log(visits+1), family="poisson",data=gaData)
summary(glm3)
exp(glm2$coeff)
exp(glm3$coeff)
(glm2$coeff)
(glm3$coeff)
log(10)-glm2$coeff
glm2$coeff-log(10)
load("~/downloads/webData.rda")
gaData$julian<-julian(gaData$date)
head(gaData)
glm3<-glm(gaData$simplystats~julian(gaData$date),offset=log(log(10) + visits), family="poisson",data=gaData)
glm2<-glm(gaData$simplystats~julian(gaData$date),offset=log(visits), family="poisson",data=gaData)
glm2<-glm(gaData$simplystats~julian(gaData$date),offset=log(visits+1), family="poisson",data=gaData)
glm3<-glm(gaData$simplystats~julian(gaData$date),offset=log(log(10) + visits+1), family="poisson",data=gaData)
summary(glm2)
summary(glm3)
glm2$coeff-glm3$coeff
log(10)
glm2$coeff-log(10)
log(10)-glm2$coeff
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
var(rpois(1000, 50))
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date'])))
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<-glm(visits ~ date, offset=log(visits+1), poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit<-lm(child~parent, data=galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coeff[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est)
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChild, varEst, varRes)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor<-lm(galton$child~ galton$child)
l_nor <- lm(gch_nor ~ gpa_nor)
fit<-lm(child~parent, galton)
fit$residuals/n-2
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot
sTot<-
k
sTot<-0
sTot <- sum((galton$child-mu)^2)
sRes<-deviance(f)
sRes<-deviance(fit)
1-(sRes-sTot)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
df <- data.frame(xMat)
df <- cbind(y, df)
names(df) <- c("y", "Intercept", "x", "splines")
lm(y ~ . - 1, data=df)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
df <- data.frame(xMat)
df <- cbind(y, df)
names(df) <- c("y", "Intercept", "x", "splines")
lm(y ~ . - 1, data=df)
summary(lm(y ~ . - 1, data=df))
m<-c(1,1,0,0)
median(m)
m<-c(1,1,0,)
m<-c(1,1,0)
median(m)
m<-c(1,0,0)
median(m)
m<-c(1,1,0,0)
median(m)
m<-c(1,1,1,0)
median(m)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(adData)
diagnosis
predictors
headlibrary(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(inTrain)
head(training)
plot(training$CompressiveStrength)
qplot(CompressiveStrength, data=training)
ggplot(data=training, aes(y = CompressiveStrength, x = seq(1, length(CompressiveStrength)))) + geom_point()
ggplot(data=training, aes(y = CompressiveStrength, x = seq(1, length(CompressiveStrength)))) + geom_point(colour=cond2)
ggplot(data=training, aes(y = CompressiveStrength, x = seq(1, length(CompressiveStrength)))) + geom_point(colour=FlyAsh)
ggplot(data=training, aes(y = CompressiveStrength, x = seq(1, length(CompressiveStrength)),color=FlyAsh)) + geom_point()
ggplot(data=training, aes(y = CompressiveStrength, x = seq(1, length(CompressiveStrength)),color=Age)) + geom_point()
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
log10
qplot(log10(Superplasticizer), data=training)
qplot(Superplasticizer, data=training)
qplot(log(Superplasticizer), data=training)
qplot(log(Superplasticizer+1), data=training)
qplot(Superplasticizer, data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(testing)
grep(training, "IL_", ignore.case=F)
grep("IL_", training, ignore.case=F)
grep("IL_", names(training), ignore.case=F)
training[grep("IL_", names(training), ignore.case=F)]
head(training[grep("^IL", names(training), ignore.case=F)])
preProcess((training[grep("^IL", names(training), ignore.case=F)]))
preProcess(log10(training[grep("^IL", names(training), ignore.case=F)]+1), method="pca", pcaComp=2)
log10(training[grep("^IL", names(training), ignore.case=F)]+1)
preProcess(log10(training[grep("^IL", names(training), ignore.case=F)]+1), method="pca")
preProcess(log10(training[grep("^IL", names(training), ignore.case=F)]+1))
preProcess(training[grep("^IL", names(training), ignore.case=F)], method="pca")
preProcess(training[grep("^IL", names(training), ignore.case=F)], method="pca", thresh=.8)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pctraining<-training[grep("^IL", names(training), ignore.case=F)]
npctraining<-pctraining
pctraining<-data.frame(pctraining,diagnosis)
pctraining<-training[grep("^IL", names(training), ignore.case=F)|diagnosis]
pctraining<-training[grep("^IL", names(training), ignore.case=F)|"diagnosis"]
pctraining<-training[grep("^IL", names(training), ignore.case=F)|grep("diagnosis", names(training))]
pctraining
pctraining<-training[grep("^IL", names(training), ignore.case=F)&grep("diagnosis", names(training))]
head(pctraining)
pctraining<-training[grep("diagnosis", names(training))]
head(pctraining)
pctraining<-data.frame(pctraining,training$diagnosis)
head(pctraining)
pctraining<-training[grep("^IL", names(training), ignore.case=F)]
pctraining<-data.frame(pctraining,training$diagnosis)
head(pctraining)
npctraining<-pctraining
preProc<-preProcess(pctraining,method="pca")
str(pctraining)
preProc<-preProcess(pctraining[,-13],method="pca")
trainPC<-predict(preProc, pctraining[,-13])
fitPC<-train(pctraining$training.diagnosis~., method="glm", data=trainPC)
fitPC<-train(pctraining$training.diagnosis~., method="glm", data=trainPC)
install.packages("e1071")
fitPC<-train(pctraining$training.diagnosis~., method="glm", data=trainPC)
pctesting<-testing[grep("^IL", names(testing), ignore.case=F)]
pctesting<-data.frame(pctesting,testing$diagnosis)
testPc<-predict(preProc, pctesting[,-13])
confusionMatrix(fitPC,testPC)
confusionMatrix(pctesting$testing.diagnosis, predict(fitPC,testPC))
confusionMatrix(pctesting$testing.diagnosis, predict(fitPC,testPc))
fitNPC<-train(pctraining$training.diagnosis~., method="glm", data=trainPC)
confusionMatrix(pctesting$testing.diagnosis, fitNPC)
confusionMatrix(pctesting$testing.diagnosis, predict(fitNPC, testing[,-13])
)
confusionMatrix(pctesting$testing.diagnosis, predict(fitNPC, testing[,-13]))
confusionMatrix(pctesting$testing.diagnosis, fitNPC)
testThingie<-predict(fitNPC, testing[,-13])
testThingie<-predict(fitNPC, testing)
confusionMatrix(pctesting$testing.diagnosis, predict(fitNPC))
confusionMatrix(pctesting$testing.diagnosis, predict(fitNPC, pctesting[,-13]))
confusionMatrix(pctesting$testing.diagnosis, predict(fitNPC, pctesting))
confusionMatrix(pctesting$testing.diagnosis, predict(fitNPC, pctesting[,-13]))
head(pctesting)
predict(fitNPC, pctesting[,-13])
fitNPC
preProc(pctraining[,-13],method="pca",thresh=.8)
preProc<-preProcess(pctraining[,-13],method="pca",thresh=.8)
trainPC<-predict(preProc, pctraining[,-13])
fitPC<-(pctraining$training.diagnosis~.,method="glm", data=pctraining)
fitPC<-train(pctraining$training.diagnosis~.,method="glm", data=pctraining)
testPC<-predict(preProc, pctesting[,-13])
confusionMatrix(pctesting$testing.diagnosis, predict(fitPC, testPC))
testPC
head(pctesting)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pctraining<-training[grep("^IL", names(training), ignore.case = F)]
pctraining<-data.frame(pctraining, training[grep("diagnosis", names(training))]
)
str(pctraining)
pctesting<-testing[grep("^IL", names(testing), ignore.case = F)]
pctraining<-data.frame(pctesting, testing[grep("diagnosis", names(testing))]
)
fitNormal<-train(diagnosis~.,model="glm",data=pctraining)
preProc<-preProcess(pctraining[,-13], method="pca", thresh=.8)
trainPC<-predict(preProc, pctraining[,-13])
fitProcessed<-train(pctraining$diagnosis~.,method="glm", data=trainPC)
testPC<-predict(preProc, pctesting[,-13])
View(pctesting)
pctesting<-data.frame(pctesting, testing[grep("diagnosis", names(testing))]
)
pctraining<-training[grep("^IL", names(training), ignore.case = F)]
pctraining<-data.frame(pctraining, training[grep("diagnosis", names(training))]
)
fitNormal<-train(diagnosis~.,model="glm",data=pctraining)
fitNormal<-train(diagnosis~.,model="glm",data=pctraining)
preProc<-preProcess(pctraining[,-13], method="pca", thresh=.8)
trainPC<-predict(preProc, pctraining[,-13])
fitProcessed<-train(pctraining$diagnosis~.,method="glm", data=trainPC)
testPC<-predict(preProc, pctesting[,-13])
confusionMatrix(pctesting$diagnosis, predict(fitPC, testPC))
fitPC
fitNormal
fitProcessed<-train(pctraining$diagnosis~.,method="glm", preprocess= "pca", data=pctraining)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$Superplasticizer)
qplot(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training, method="pca", thresh=.9)
View(training)
preProcess(training[-"diagnosis"], method="pca", thresh=.9)
preProcess(training[-'diagnosis'], method="pca", thresh=.9)
preProcess(training[,-2], method="pca", thresh=.9)
preProcess(training[grep("^IL", training, ignore.case = F)], method="pca", thresh=.9)
preProcess(training[grep("^IL", names(training), ignore.case = F)], method="pca", thresh=.9)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
svm(CompressiveStrength~., data=training)
thingie<-svm(CompressiveStrength~., data=training)
pred <- predict(thingie, testing)
sqrt(mean((pred-testing$CompressiveStrength)^2))
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent,galton)
fit<-lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coefficients[,1]
ols.ic<-fit$coefficients[1]
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
varChild<-var()
varChild<-var(x)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(ols.ic)
varEst<-var(est(ols.slope,ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
cor(gpa_nor,gch_nor)
l_nor<-lm(child~parent, data=galton)
l_nor<-lm(gch_nor~gpa_nor)
fit
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-
j
sTot<-x
sTot <- sum((galton$child-mu)^2)
sRes<-deviance(fit$residuals)
sRes<-deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent-1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(trees)
it <- lm(Volume ~ Girth + Height + Constant -1, trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2<- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
airDataRandwick<-read.csv("./Data/HourlyAQIRandwick.csv")
setwd("~/Dropbox/Uni/UNSW/Sustainable Development/SustainableDevelopmentandtheUrbanEnvironment/Group/Analysis/AirPollutionAnalysis")
airDataRandwick<-read.csv("./Data/HourlyAQIRandwick.csv")
airDataRandwick$
qplot(x=factor(Time), y = RANDWICK.AQI.hourly.AQI..index., data=airDataRandwick, geom="boxplot")
library(ggplot2)
qplot(x=factor(Time), y = RANDWICK.AQI.hourly.AQI..index., data=airDataRandwick, geom="boxplot")
airDataProspect<-read.csv("./Data/HourlyAQI.csv")
qplot(x=factor(Time), y = PROSPECT.AQI.hourly.AQI..index., data=airDataProspect, geom="boxplot")
megaData<-airDataProspect
head(megaData)
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
setwd("~/Dropbox/Uni/UNSW/Sustainable Development/SustainableDevelopmentandtheUrbanEnvironment/Group/Analysis/AirPollutionAnalysis")
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
PM10Prospect
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
head(PM10Prospect)
PM10Prospect[PM10Prospect$PROSPECT.PM10.24h.average..µg.m.. >50,]
PM10Prospect$PROSPECT.PM10.24h.average..µg.m..<-as.numeric(PM10Prospect$PROSPECT.PM10.24h.average..µg.m..)
PM10Prospect[PM10Prospect$PROSPECT.PM10.24h.average..µg.m.. >50,]
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
PM10Prospect$PROSPECT.PM10.24h.average..µg.m..<-as.double(PM10Prospect$PROSPECT.PM10.24h.average..µg.m..)
PM10Prospect[PM10Prospect$PROSPECT.PM10.24h.average..µg.m.. >50,]
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
head(PM10Prospect)
PM10Prospect<-read.csv("./Data/DailyPM10Prospect.csv")
PM10Prospect$PROSPECT.PM10.24h.average..µg.m..<-as.numeric(as.charcater(PM10Prospect$PROSPECT.PM10.24h.average..µg.m..))
PM10Prospect$PROSPECT.PM10.24h.average..µg.m..<-as.numeric(as.character(PM10Prospect$PROSPECT.PM10.24h.average..µg.m..))
PM10Prospect[PM10Prospect$PROSPECT.PM10.24h.average..µg.m.. >50,]
PM10Vineyard<-read.csv("./Data/DailyPM10Vineyard.csv")
PM10Vineyard$Vineyard.PM10.24h.average..µg.m..<-as.numeric(as.character(PM10Vineyard$Vineyard.PM10.24h.average..µg.m..))
PM10Vineyard$VINEYARD.PM10.24h.average..µg.m..<-as.numeric(as.character(PM10Vineyard$VINEYARD.PM10.24h.average..µg.m..))
PM10Vineyard[PM10Vineyard$VINEYARD.PM10.24h.average..µg.m.. >50,] #days over 50µg/m3 PM10
PM10StMarys<-read.csv("./Data/DailyPM10StMarys.csv")
PM10StMarys$STMARYS.PM10.24h.average..µg.m..<-as.numeric(as.character(PM10StMarys$STMARYS.PM10.24h.average..µg.m..))
PM10StMarys$ST.MARYS.PM10.24h.average..µg.m..<-as.numeric(as.character(PM10StMarys$ST.MARYS.PM10.24h.average..µg.m..))
PM10StMarys[PM10StMarys$ST.MARYS.PM10.24h.average..µg.m.. >50,] #days over 50µg/m3 PM10
airDataVineyard<-read.csv("./Data/HourlyAQI.csv")
qplot(x=factor(Time), y = VINEYARD.AQI.hourly.AQI..index., data=airDataVineyard, geom="boxplot")
airDataVineyard<-read.csv("./Data/HourlyAQIVineyard.csv")
airDataVineyard<-read.csv("./Data/HourlyAQIVineyard.csv")
qplot(x=factor(Time), y = VINEYARD.AQI.hourly.AQI..index., data=airDataVineyard, geom="boxplot")
qplot(x=factor(Time), y = VINEYARD.AQI.hourly.AQI..index., data=airDataVineyard, geom="boxplot")
